var Base16=function(){"use strict";class t{static toBytes(t){return ArrayBuffer.isView(t)&&(t=t.buffer),[new Uint8Array(t),!1,"bytes"]}}class e{static get typeList(){return["buffer","bytes","uint8","view"]}static getType(t){if(!e.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}static compile(t,n){let r;return r="buffer"===(n=e.getType(n))?t.buffer:"view"===n?new DataView(t.buffer):t,r}}class n{static makeDataView(t){const e=new ArrayBuffer(t);return new DataView(e)}static floatingPoints(t,e=!1){const n=this.makeDataView(8);return n.setFloat64(0,t,e),n}static numbers(t,e=!1){let n,r;if(Number.isInteger(t)){if(r="int",!Number.isSafeInteger(t)){let e,n,r;throw t<0?(e=Number.MIN_SAFE_INTEGER,n="smaller",r="MIN"):(e=Number.MAX_SAFE_INTEGER,n="bigger",r="MAX"),new RangeError(`The provided integer is ${n} than ${r}_SAFE_INTEGER: '${e}'\nData integrity is not guaranteed. Use a BigInt to avoid this issue.\n(If you see this error although a float was provided, the input has to many digits before the decimal point to store the decimal places in a float with 64 bits.)`)}t<0?t<-2147483648?(n=this.makeDataView(8),n.setBigInt64(0,BigInt(t),e)):t<-32768?(n=this.makeDataView(4),n.setInt32(0,t,e)):(n=this.makeDataView(2),n.setInt16(0,t,e)):t>0?t>4294967295?(n=this.makeDataView(8),n.setBigUint64(0,BigInt(t),e)):t>65535?(n=this.makeDataView(4),n.setUint32(0,t,e)):(n=this.makeDataView(2),n.setInt16(0,t,e)):n=new Uint16Array([0])}else r="float",n=this.floatingPoints(t,e);return[new Uint8Array(n.buffer),r]}static bigInts(t,e=!1){const n=new Array,r=e?"push":"unshift",i=18446744073709551616n;if(t<0)for(;t<-9223372036854775808n;)n[r](t%i),t>>=64n;else for(;t>=i;)n[r](t%i),t>>=64n;n[r](t);const s=8*n.length,o=this.makeDataView(s);return n.forEach(((t,n)=>{const r=8*n;o.setBigUint64(r,t,e)})),new Uint8Array(o.buffer)}static toBytes(t,e){let n,r=!1,i="bytes";if(t instanceof ArrayBuffer)n=new Uint8Array(t.slice());else if(ArrayBuffer.isView(t))n=new Uint8Array(t.buffer.slice());else if("string"==typeof t||t instanceof String)n=(new TextEncoder).encode(t);else if("number"==typeof t){if(isNaN(t))throw new TypeError("Cannot proceed. Input is NaN.");if(t==1/0)throw new TypeError("Cannot proceed. Input is Infinity.");if(e.signed&&t<0&&(r=!0,t=-t),e.numberMode){const r=this.floatingPoints(t,e.littleEndian);n=new Uint8Array(r.buffer),i="float"}else[n,i]=this.numbers(t,e.littleEndian)}else if("bigint"==typeof t)e.signed&&t<0&&(r=!0,t*=-1n),n=this.bigInts(t,e.littleEndian),i="int";else{if(!Array.isArray(t))throw new TypeError("The provided input type can not be processed.");{const r=new Array;for(const n of t)r.push(...this.toBytes(n,e)[0]);n=Uint8Array.from(r)}}return[n,r,i]}}const r=n,i=class{static get typeList(){return["bigint64","bigint_n","biguint64","buffer","bytes","float32","float64","float_n","int8","int16","int32","int_n","str","uint8","uint16","uint32","uint_n","view"]}static getType(t){if(!this.typeList.includes(t))throw new TypeError(`Unknown output type: '${t}'`);return t}static makeTypedArrayBuffer(t,e,n,r){const i=t.byteLength,s=(e-t.byteLength%e)%e,o=r&&i>1?255:0;let a=t;if(s){a=new Uint8Array(i+s),a.fill(o);const e=n?0:s;a.set(t,e)}return a.buffer}static makeTypedArray(t,e,n,r){let i;if("int16"===e||"uint16"===e){const s=this.makeTypedArrayBuffer(t,2,n,r);i="int16"===e?new Int16Array(s):new Uint16Array(s)}else if("int32"===e||"uint32"===e||"float32"===e){const s=this.makeTypedArrayBuffer(t,4,n,r);i="int32"===e?new Int32Array(s):"uint32"===e?new Uint32Array(s):new Float32Array(s)}else if("bigint64"===e||"biguint64"===e||"float64"===e){const s=this.makeTypedArrayBuffer(t,8,n,r);i="bigint64"===e?new BigInt64Array(s):"biguint64"===e?new BigUint64Array(s):new Float64Array(s)}return i}static compile(t,e,r=!1,i=!1){let s;if(e=this.getType(e),i){let i;if(i=e.match(/^float/)?-this.compile(t,"float_n",r):-this.compile(t,"uint_n",r),"float_n"===e)return i;t=n.toBytes(i,{littleEndian:r,numberMode:!1,signed:!1})[0]}if("buffer"===e)s=t.buffer;else if("bytes"===e||"uint8"===e)s=t;else if("int8"===e)s=new Int8Array(t.buffer);else if("view"===e)s=new DataView(t.buffer);else if("str"===e)s=(new TextDecoder).decode(t);else if("uint_n"===e||"int_n"===e||"bigint_n"===e){if(1===t.length){const e=this.makeTypedArrayBuffer(t,2,r,i);t=new Uint8Array(e)}r&&t.reverse();let n=0n;t.forEach((t=>n=(n<<8n)+BigInt(t))),"uint_n"!==e&&(n=BigInt.asIntN(8*t.length,n)),s="bigint_n"!==e&&n>=Number.MIN_SAFE_INTEGER&&n<=Number.MAX_SAFE_INTEGER?Number(n):n}else if("float_n"===e)if(t.length<=4){let e;e=4===t.length?t:this.makeTypedArray(t,"float32",!1,i);s=new DataView(e.buffer).getFloat32(0,r)}else{if(!(t.length<=8))throw new RangeError("The provided input is to complex to be converted into a floating point.");{let e;e=8===t.length?t:this.makeTypedArray(t,"float64",!1,i);s=new DataView(e.buffer).getFloat64(0,r)}}else if("number"===e){if(8!==t.length)throw new TypeError("Type mismatch. Cannot convert into number.");const e=new Float64Array(t.buffer);s=Number(e)}else s=this.makeTypedArray(t,e,r,i);return s}};class s extends TypeError{constructor(){super("The input is signed but the converter is not set to treat input as signed.\nYou can pass the string 'signed' to the decode function or when constructing the converter."),this.name="SignError"}}class o extends TypeError{constructor(t,e=null){null===e&&(e=`Character '${t}' is not part of the charset.`),super(e),this.name="DecodingError"}}class a{constructor(t){this.root=t,this.converterArgs={},this.#t()}setIOHandlers(t=r,e=i){this.inputHandler=t,this.outputHandler=e}#t(){this.root.addCharset=(t,e,n=[],r=!0)=>{const i=(t,n,r)=>{if(0===r&&n.length)return console.warn(`This converter has no ${t}. The following argument was ignored:\n'${n}'`),[];let i=r;if("string"==typeof n&&(n=[...n]),Array.isArray(n))i=n.length,n=new Set(n);else if(!(n instanceof Set))throw new TypeError(`The ${t} must be one of the types:\n'str', 'set', 'array'."`);if(n.size===r)return[...n];if(i!==r)throw new Error(`Your ${t} has a length of ${i}. The converter requires a length of ${r}.`);{const n={};(e=[...e]).forEach((t=>{t in n?n[t]++:n[t]=1}));let i="";r<100&&(i=`${e.join("")}\n`,e.forEach((t=>{n[t]>1?i+="^":i+=" "})));const s=Object.keys(n).filter((t=>n[t]>1));throw new Error(`You have repetitive char(s) [ ${s.join(" | ")} ] in your ${t}. Make sure each character is unique.\n${i}`)}};if(this.root.frozenCharsets)throw new Error("The charsets of this converter cannot be changed.");if("string"!=typeof t)throw new TypeError("The charset name must be a string.");r&&t in this.root.charsets&&console.warn(`An existing charset with name ${t} will get replaced.`);const s=i("charset",e,this.root.converter.radix),o=i("padding set",n,this.root.padCharAmount);this.root.charsets[t]=s,o.length&&(this.root.padChars[t]=o),r&&console.info(`New charset '${t}' was added and is ready to use`)},this.root.setDefaultCharset=t=>{if(!(t in this.root.charsets)){const e=Object.keys(this.root.charsets).join("\n   * ");throw new TypeError(`Charset ${t} was not found. Available charsets are:\n   * ${e}`)}this.root.version=t}}#e(t){return t.map((t=>`'${t}'`)).join(", ")}toSignedStr(t,e){return t=t.replace(/^0+(?!$)/,""),e&&(t="-".concat(t)),t}extractSign(t){let e=!1;return"-"===t[0]&&(e=!0,t=t.slice(1)),[t,e]}#n(t,e,n,r){throw new TypeError([`'${t}'\n\nParameters:`,r?"\n * valid declarations for IO handlers are 'bytesOnly', 'bytesIn', 'bytesOut'":"",this.root.isMutable.signed?"\n * pass 'signed' to disable, 'unsigned' to enable the use of the twos's complement for negative integers":"",this.root.isMutable.littleEndian?"\n * 'be' for big , 'le' for little endian byte order for case conversion":"",this.root.isMutable.padding?"\n * pass 'pad' to fill up, 'nopad' to not fill up the output with the particular padding":"",this.root.isMutable.upper?"\n * valid args for changing the encoded output case are 'upper' and 'lower'":"",`\n * valid args for the output type are ${this.#e(n)}`,e?`\n * the option(s) for version/charset are: ${this.#e(e)}`:"","\n * valid args for integrity check are: 'integrity' and 'nointegrity'",this.root.hasDecimalMode?"\n * 'decimal' for decimal-mode (directly converts Numbers including decimal values, without byte-conversion)":"","\n * 'number' for number-mode (converts every number into a Float64Array to keep the natural js number type)",Object.keys(this.converterArgs).length?`\n * converter specific args:\n   - ${(()=>Object.keys(this.converterArgs).map((t=>this.converterArgs[t].map((t=>`'${t}'`)).join(" and "))).join("\n   - "))()}`:"","\n\nTraceback:"].join(""))}validateArgs(n,s=!1){const o={decimalMode:this.root.decimalMode,integrity:this.root.integrity,littleEndian:this.root.littleEndian,numberMode:this.root.numberMode,options:this.root.options,outputType:this.root.outputType,padding:this.root.padding,signed:this.root.signed,upper:this.root.upper,version:this.root.version};for(const t in this.converterArgs)o[t]=this.root[t];if(!n.length)return s&&this.setIOHandlers(),o;const a=t=>!!n.includes(t)&&(n.splice(n.indexOf(t),1),!0),l=Object.keys(this.root.charsets),h={integrity:["nointegrity","integrity"],littleEndian:["be","le"],padding:["nopad","pad"],signed:["unsigned","signed"],upper:["lower","upper"],...this.converterArgs};if(s)if(a("bytes_only"))this.setIOHandlers(t,e);else{const n=a("bytes_in")?t:r,s=a("bytes_out")?e:i;this.setIOHandlers(n,s)}const u=this.outputHandler.typeList;if(a("number")&&(o.numberMode=!0,o.outputType="float_n"),a("decimal")){if(!this.root.hasDecimalMode)throw TypeError("Argument 'decimal' is only allowed for converters with a non-integer base.");o.decimalMode=!0,o.outputType="decimal",o.numberMode&&(o.numberMode=!1,console.warn("-> number-mode was disabled due to the decimal-mode"))}if(n.forEach((t=>{if("object"!=typeof t)if(t=String(t).toLowerCase(),l.includes(t))o.version=t;else if(u.includes(t))o.outputType=t;else{let e=!0;for(const n in h)if(h[n].includes(t)){if(e=!1,!this.root.isMutable[n])throw TypeError(`Argument '${t}' is not allowed for this type of converter.`);o[n]=Boolean(h[n].indexOf(t))}e&&this.#n(t,l,u,s)}else o.options={...o.options,...t}})),o.padding&&o.signed&&(o.padding=!1,console.warn("-> padding was set to false due to the signed conversion")),s)for(const t in o)this.root[t]=o[t];return o}signError(){throw new s}wrapOutput(t,e=0){if(!e)return t;const n=new RegExp(`.{1,${e}}`,"gu");return t.match(n).join("\n")}normalizeInput(t,e=!1){return e?String(t):String(t).replace(/\s/g,"")}}class l{constructor(t,e=null,n=null,r=0){this.radix=t,null!==e&&null!==n?(this.bsEnc=e,this.bsDec=n):[this.bsEnc,this.bsDec]=this.constructor.guessBS(t),this.decPadVal=r,this.powers={}}static guessBS(t){let e=t<8?t:Math.ceil(256/t);for(;e>8&&!(e%8);)e/=8;let n=0;for(;8*n*Math.log(2)/Math.log(t)<e;)n++;return[n,Math.ceil(8*n*Math.log(2)/Math.log(t))]}encode(t,e,n=!1,r=null){let i=this.bsEnc;0===i&&(i=t.byteLength);let s="";const o=i?(i-t.length%i)%i:0,a=new Array(o).fill(0);let l;if(n?(t.reverse(),l=[...a,...t]):l=[...t,...a],10===this.radix){let t=0n;for(let e=0;e<i;e++)t=(t<<8n)+BigInt(l[e]);return[t.toString(),0]}for(let t=0,n=l.length;t<n;t+=i){let n=0n;for(let e=t;e<t+i;e++)n=(n<<8n)+BigInt(l[e]);const a=new Array;let h,u=n;for(;u>=this.radix;)[u,h]=this.divmod(u,this.radix),a.unshift(parseInt(h,10));for(a.unshift(parseInt(u,10));a.length<this.bsDec;)a.unshift(0);let c="";a.forEach((t=>c=c.concat(e[t]))),r&&(c=r(c,o)),s=s.concat(c)}return[s,o]}decode(t,e,n=[],r=!0,i=!1){if(!t)return new Uint8Array(0);let s=this.bsDec;const a=[],l=(t=>{const e={};return t.forEach(((t,n)=>e[t]=n)),e})(e);let h;if([...t].forEach((t=>{const e=l[t];if(void 0!==e)a.push(e);else if(r&&-1===n.indexOf(t))throw new o(t)})),0===s)s=a.length;else{h=(s-a.length%s)%s;const t=new Array(h).fill(this.decPadVal);i?a.unshift(...t):a.push(...t)}let u=new Array;for(let t=0,e=a.length;t<e;t+=s){let e=0n;for(let n=0;n<s;n++){const r=s-1-n,i=this.powers[r]||(()=>(this.powers[r]=BigInt(this.pow(r)),this.powers[r]))();e+=BigInt(a[t+n])*i}const n=[];let r,i=e;for(;i>=256;)[i,r]=this.divmod(i,256),n.unshift(parseInt(r,10));for(n.unshift(parseInt(i,10));n.length<this.bsEnc;)n.unshift(0);u.push(...n)}if(i){if(u.length>1){for(;!u[0];)u.shift();u.length||u.push(0),u.reverse()}}else if(this.bsDec){const t=this.padChars(h);u.splice(u.length-t)}return Uint8Array.from(u)}padBytes(t){return Math.floor(t*this.bsDec/this.bsEnc)}padChars(t){return Math.ceil(t*this.bsEnc/this.bsDec)}pow(t){return BigInt(this.radix)**BigInt(t)}divmod(t,e){return[t,e]=[BigInt(t),BigInt(e)],[t/e,t%e]}}class h{constructor(t=!0){this.charsets={},this.decimalMode=!1,this.frozenCharsets=!1,this.hasDecimalMode=!1,this.hasSignedMode=!1,this.integrity=!0,this.littleEndian=!1,this.numberMode=!1,this.outputType="buffer",this.padding=!1,this.padCharAmount=0,this.padChars={},this.signed=!1,this.upper=null,t&&(this.utils=new a(this)),this.version="default",this.options={lineWrap:0},this.isMutable={integrity:!0,littleEndian:!1,padding:!1,signed:!1,upper:!1}}encode(t,e,n,...r){const i=this.utils.validateArgs(r);let[s,o,a]=this.utils.inputHandler.toBytes(t,i),l=null;e&&(l=e(i));let[h,u]=this.converter.encode(s,this.charsets[i.version],i.littleEndian,l);return i.signed&&(h=this.utils.toSignedStr(h,o)),i.upper&&(h=h.toUpperCase()),n&&(h=n({inputBytes:s,output:h,settings:i,zeroPadding:u,type:a})),this.utils.wrapOutput(h,i.options.lineWrap)}decode(t,e,n,r,...i){const s=this.utils.validateArgs(i);t=this.utils.normalizeInput(t,r);let o=!1;this.hasSignedMode&&([t,o]=this.utils.extractSign(t),o&&!s.signed&&this.utils.signError()),this.isMutable.upper&&(t=t.toLowerCase()),e&&(t=e({input:t,settings:s}));let a=this.converter.decode(t,this.charsets[s.version],this.padChars[s.version],s.integrity,s.littleEndian);return n&&(a=n({input:t,output:a,settings:s})),this.utils.outputHandler.compile(a,s.outputType,s.littleEndian,o)}}
/**
     * [BaseEx|Base16 Converter]{@link https://github.com/UmamiAppearance/BaseExJS/blob/main/src/converters/base-16.js}
     *
     * @version 0.7.9
     * @author UmamiAppearance [mail@umamiappearance.eu]
     * @license MIT
     */return class extends h{constructor(...t){super(),this.converter=new l(16,1,2),this.charsets.default=[..."0123456789abcdef"],this.padChars.default=[],this.hasSignedMode=!0,this.isMutable.signed=!0,this.isMutable.upper=!0,this.utils.validateArgs(t,!0)}encode(t,...e){return super.encode(t,null,null,...e)}decode(t,...e){return super.decode(t,(({input:t,settings:e})=>(t=t.replace(/^0x/,""),e.integrity||(t=t.toLowerCase().replace(/[^0-9a-f]/g,"")),t.length%2&&(t="0".concat(t)),t)),null,!1,...e)}}}();
